{"_id":"7ITiVHnrmRX0piHq","name":"Mayhem!","type":"script","author":"mM9Gw0AoWFaq5rLx","img":"icons/skills/melee/strike-flail-destructive-yellow.webp","scope":"global","command":"// mayhem macro.\n// save mayhem dice on user in a flag.\n// max: number of players.\n// min: 0.\n\nif(!game.user.isGM) return ui.notifications.error(\"Mayhem is for GMs only!\");\n\nconst value = game.user.getFlag(\"world\", \"mayhem.value\") ?? 0;\nconst max = 5;\n\nnew Dialog({\n\ttitle: \"Mayhem!\",\n\tcontent: `\n\t\t<p>When a player is reduced to zero hit points, or killed outright, the DM earns one point of inspiration.\n\t\tThe points stack to a maximum of <strong>${max}</strong> points.</p>\n\t\t<p style=\"text-align:center\">You currently have <strong>${value}</strong> points.</p>\n\t\t<hr>`,\n\tbuttons: {\n\t\tearn: {\n\t\t\ticon: `<i class=\"fas fa-arrow-up\"></i>`,\n\t\t\tlabel: \"Earn a point\",\n\t\t\tcallback: async () => {\n\t\t\t\tif(value >= max) return ui.notifications.info(\"You cannot earn more points.\");\n\t\t\t\tconst newValue = Math.min(value + 1, max);\n\t\t\t\tawait game.user.setFlag(\"world\", \"mayhem.value\", newValue);\n\t\t\t\treturn ChatMessage.create({\n\t\t\t\t\tuser: game.user.id,\n\t\t\t\t\tspeaker: ChatMessage.getSpeaker({alias: game.user.name}),\n\t\t\t\t\tcontent: `<p><strong><em>Mayhem.</em></strong> The GM has gained one point of inspiration.</p><p>Current stack: <strong>${newValue}</strong></p>`\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tspend: {\n\t\t\ticon: `<i class=\"fas fa-arrow-down\"></i>`,\n\t\t\tlabel: \"Spend a point\",\n\t\t\tcallback: async () => {\n\t\t\t\tif(value < 1) return ui.notifications.info(\"You have no points to spend.\");\n\t\t\t\tconst newValue = Math.max(0, value - 1);\n\t\t\t\tawait game.user.setFlag(\"world\", \"mayhem.value\", newValue);\n\t\t\t\treturn ChatMessage.create({\n\t\t\t\t\tuser: game.user.id,\n\t\t\t\t\tspeaker: ChatMessage.getSpeaker({alias: game.user.name}),\n\t\t\t\t\tcontent: `<p><strong><em>Mayhem.</em></strong> The GM has spent one point of inspiration.</p><p>Current stack: <strong>${newValue}</strong></p>`\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\tdefault: value > 0 ? \"spend\" : \"earn\"\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"mM9Gw0AoWFaq5rLx":3},"flags":{"exportSource":{"world":"test-world","system":"dnd5e","coreVersion":"9.269","systemVersion":"1.6.1"},"core":{"sourceId":"Macro.iNN8kMn0x88xl5LS"}}}
{"name":"spawn template immediate","type":"script","author":"ssK6qqhMHUvM1A06","img":"icons/svg/dice-target.svg","scope":"global","command":"async function wait(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\nfunction toDegrees(rads) {\n    return (rads * 180 / Math.PI) + 90;\n}\n\nif(!token) return ui.notifications.info(\"no token selected\")\n\nconst rayLengthFt = 30;\nconst rayLengthPx = canvas.grid.size * rayLengthFt / canvas.scene.data.gridDistance;\nconst startPoint = {x: token.center.x, y: token.center.y};\nlet angle = 0;\nlet start = 0;\nlet request;\nconst fill = game.user.data.color;\n\nasync function onLoad(){\n    let rayLine = new PIXI.Graphics();\n    rayLine.position.set(startPoint.x, startPoint.y);\n    rayLine.lineStyle(15, fill.replace(\"#\",\"0x\"), 0.5)\n       .moveTo(0, 0)\n       .lineTo(0, rayLengthPx);\n    rayLine.name = \"tempRay\";\n    canvas.app.stage.addChild(rayLine);\n    requestAnimationFrame(step);\n}\nfunction step(timestamp) {\n    let marker = canvas.app.stage.children.find(c => c.name == \"tempRay\");\n    if (start === 0) start = timestamp;\n    const elapsed = timestamp - start;\n    const mousePos = canvas.app.renderer.plugins.interaction.mouse.getLocalPosition(canvas.app.stage);\n    angle = mousePos.x === startPoint.x ? toDegrees(Math.PI / 2): \n                  mousePos.x > startPoint.x ? toDegrees(Math.PI - Math.atan((startPoint.y - mousePos.y)/(mousePos.x - startPoint.x))):\n                  mousePos.x < startPoint.x ? toDegrees(Math.atan((mousePos.y - startPoint.y)/(mousePos.x - startPoint.x))) : 0;//Math.ceil(elapsed * 360 / 1000);\n    marker.angle = angle\n    if (elapsed < 1000) request = requestAnimationFrame(step);\n    else { \n        start = 0;\n        console.log(angle)\n        request = requestAnimationFrame(step);\n    }\n}\n\nfunction offSet(angle){\n\tconst halfGrid = canvas.grid.size / 2;\n\tconst angleR = Math.round(angle/45)*45;\n\tconsole.log(angleR);\n\tlet x, y;\n\t\n\tswitch(angleR){ // set x offset first\n\t\tcase 0:\n\t\tcase 180:\n\t\tcase 360:\n\t\t\tx = 0;\n\t\t\tbreak;\n\t\tcase 45:\n\t\tcase 90:\n\t\tcase 135:\n\t\t\tx = -halfGrid;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tx = halfGrid;\n\t}\n\tswitch(angleR){ // set y offset\n\t\tcase 0:\n\t\tcase 45:\n\t\tcase 315:\n\t\tcase 360:\n\t\t\ty = halfGrid;\n\t\t\tbreak;\n\t\tcase 135:\n\t\tcase 180:\n\t\tcase 225:\n\t\t\ty = -halfGrid;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ty = 0;\n\t}\n\t\n\tconsole.log(x);\n\tconsole.log(y);\n\t\n\treturn [x,y];\n}\n\n\n\nawait PIXI.Loader.shared\n    .load(onLoad);\n\nawait wait(500);\n\n$(document.body).on(\"click\", async () => {\n    $(document.body).off(\"click\");\n    cancelAnimationFrame(request);\n    canvas.app.stage.removeChild(canvas.app.stage.children.find(c => c.name === \"tempRay\"));\n\t\n\tlet template_data = {\n\t\tt: 'ray',\n\t\tuser: game.userId,\n\t\tdirection: angle + 90,\n\t\tdistance: rayLengthFt,\n\t\twidth: 5,\n\t\tx: startPoint.x + offSet(angle)[0],\n\t\ty: startPoint.y + offSet(angle)[1],\n\t\tborderColor: '#000000',\n\t\tfillColor: '#3898B9'\n\t};\n\tlet ranges = await canvas.scene.createEmbeddedDocuments('MeasuredTemplate', [template_data]);\n});","folder":null,"sort":0,"permission":{"default":0,"ssK6qqhMHUvM1A06":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"cf":{"id":"temp_4i202gw72r8","path":"[Unused/unfinished]","color":"#000000"},"core":{"sourceId":"Compendium.world.my-macros.4YlF9EQ1kwGMwDoz"}},"_id":"DkeLPM1sDFaZGKxk"}
{"_id":"MB6r7N6Th6yAwBDZ","name":"Rest Config","type":"script","author":"FRHavFG1029uVyVE","img":"icons/environment/settlement/house-two-stories-small.webp","scope":"global","command":"const content = `\n <p>Tick a box to enable the corresponding type of rest. If left unticked, type of rest is disabled.</p><hr>\n <form>\n  <div class=\"form-field\">\n   <div class=\"form-group\">\n    <label for=\"LR\"><strong>Long Rest:</strong></label>\n    <input type=\"checkbox\" ${game.settings.get(\"zhell-custom-stuff\", \"toggleLR\") ? '' : 'checked'} id=\"LR\"></input>\n   </div>\n   <div class=\"form-group\">\n    <label for=\"SR\"><strong>Short Rest:</strong></label>\n    <input type=\"checkbox\" ${game.settings.get(\"zhell-custom-stuff\", \"toggleSR\") ? '' : 'checked'} id=\"SR\"></input>\n   </div>\n  </div>\n </form><hr>`;\nconst title = \"Configure Rests\";\n\nnew Dialog({content, title,\n buttons: {\n  go: {\n   icon: `<i class=\"fas fa-check\"></i>`,\n   label: \"Set Rests\",\n   callback: async (html) => {\n    let SR = html[0].querySelector(\"input[id='SR']\").checked;\n    let LR = html[0].querySelector(\"input[id='LR']\").checked;\n    console.log(\"SR:\", SR, \"LR:\", LR);\n    await ZHELL.toggleLR(!LR);\n    await ZHELL.toggleSR(!SR);\n    ui.notifications.info(`SR: ${SR ? 'on' : 'off'} / LR: ${LR ? 'on' : 'off'}`);\n   }\n  }\n },\n default: \"go\"\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"FRHavFG1029uVyVE":3},"flags":{"core":{"sourceId":"Macro.mjpoalCD2666t5vr"}}}
{"_id":"gTQ4CtlaUqAbncIC","name":"Foraging","type":"script","author":"FRHavFG1029uVyVE","img":"icons/containers/misc/wheelbarrow-white.webp","scope":"global","command":"// dialog:\n// select number of hours,\n// select skill or tool.\n\n// create chat message with roll results.\nconst actor = game.user.character ?? canvas.tokens.controlled[0]?.actor;\nif(!actor) return;\nconst herbKits = actor.itemTypes.tool.filter(i => i.data?.data?.baseItem === \"herb\");\nconst hasHerbKit = herbKits.length > 0 ? herbKits[0] : null;\nconst options = ((hasHerbKit?.data.data.proficient > 0) ? `<option value=\"${hasHerbKit.id}\">${hasHerbKit.name}</option>` : \"\") + `<option value=\"nat\">Nature</option><option value=\"sur\">Survival</option>`;\nconst targetValue = game.settings.get(\"zhell-custom-stuff\", \"foragingDC\");\nnew Dialog({\n\ttitle: \"Foraging\",\n\tcontent: `\n\t\t<p>You are attempting to forage for materials. Please input the number of hours, and select your method of foraging.</p>\n\t\t<p style=\"text-align:center\">The current DC is <strong>${targetValue}</strong>.</p>\n\t\t<hr>\n\t\t<form>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"num\">Hours of foraging:</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tid=\"num\"\n\t\t\t\t\tplaceholder=\"1\"\n\t\t\t\t\tdata-dtype=\"Number\"\n\t\t\t\t\tmin=\"1\"\n\t\t\t\t\tmax=\"24\"\n\t\t\t\t\toninput=\"validity.valid || (value=1)\"\n\t\t\t\t></input>\n\t\t\t</div>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"select\">Select skill or tool:</label>\n\t\t\t\t<select id=\"select\">${options}</select>\n\t\t\t</div>\n\t\t</form><hr>`,\n\tbuttons: {\n\t\tgo: {\n\t\t\ticon: `<i class=\"fas fa-check\"></i>`,\n\t\t\tlabel: \"Forage<br><em>(Hold shift/ctrl/alt to fast-forward all rolls)</em>\",\n\t\t\tcallback: async (html) => {\n\t\t\t\tconst selection = html[0].querySelector(\"select[id=select]\").value;\n\t\t\t\tconst num = Number(html[0].querySelector(\"input[id=num]\").value || 1);\n\t\t\t\tif(isNaN(num) || num < 1) return;\n\t\t\t\tconst ev = event;\n\t\t\t\tlet counter = 0;\n\t\t\t\tif(selection.length > 3){\n\t\t\t\t\t// roll tool:\n\t\t\t\t\tconst tool = actor.items.get(selection);\n\t\t\t\t\tfor(let i = 0; i < num; i++){\n\t\t\t\t\t\tconst {total} = await tool.rollToolCheck({event: ev, targetValue, fumble: -1, critical: 21});\n\t\t\t\t\t\tif(total >= targetValue) counter++;\n\t\t\t\t\t}\n\t\t\t\t}else for(let i = 0; i < num; i++){\n\t\t\t\t\tconst {total} = await actor.rollSkill(selection, {event: ev, targetValue, fumble: -1, critical: 21});\n\t\t\t\t\tif(total >= targetValue) counter++;\n\t\t\t\t}\n\t\t\t\tconst materialValueCurrent = actor.getFlag(\"zhell-custom-stuff\", \"materia-medica.value\") ?? 0;\n\t\t\t\tawait actor.setFlag(\"zhell-custom-stuff\", \"materia-medica.value\", Math.clamped(materialValueCurrent + counter, 0, 999));\n\t\t\t\tChatMessage.create({\n\t\t\t\t\tspeaker: ChatMessage.getSpeaker({actor}),\n\t\t\t\t\tcontent: `${actor.name.split(\" \")[0]} went foraging for ${num} hours and gathered <strong>${counter} ${counter === 1 ? 'unit' : 'units'}</strong> of foraged materials (added to character sheet).`\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\tdefault: \"go\"\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"FRHavFG1029uVyVE":3},"flags":{"core":{"sourceId":"Macro.Xxe1mcyquO5EKXRk"}}}
{"name":"Mass Roll Check","type":"script","author":"ssK6qqhMHUvM1A06","img":"icons/skills/movement/feet-winged-boots-glowing-yellow.webp","scope":"global","command":"/*\n* Gets a list of selected tokens (or defaults to the user's character), provides a list of\n* skills, and then makes a roll for all the selected tokens with that skill. It then spits out\n* the poorly-formatted results to chat (or the GM if you uncomment the whisper line).\n*/\n\nfunction throwError(){\n return ui.notifications.error(\"Please select at least one token first.\");\n}\n\nlet targetActors = getTargetActors().filter(a => a != null);\nfunction checkForActors(){\n if(!targetActors.length > 0)\n  throwError();//throw new Error('You must designate at least one token as the roll target');\n};\ncheckForActors();\n\n// Choose roll type dialog\nlet rollTypeTemplate = `\n<div>\n    <div class=\"form-group\">\n        <label>Choose roll type</label>\n        <select id=\"selectedType\">\n            <option value=\"save\">Saving Throw</option>\n            <option value=\"ability\">Ability Check</option>\n            <option value=\"skill\">Skill Check</option>\n        </select>\n    </div>\n</div>`;\n\nlet chooseCheckType = new Dialog({\n    title: \"Choose check type\",\n    content: rollTypeTemplate,\n    buttons: {\n        ok: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"OK\",\n            callback:  async (html) => {\n                let checkType = html.find(\"#selectedType\")[0].value;\n                selectedCheckDialog(checkType).render(true);\n            }\n        },\n        cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Cancel'\n        }\n    },\n    default: \"cancel\"\n});\n\n\n// Choose ability mod dialog\nfunction selectedCheckDialog(checkType) {\n\n    let dialogTitle = getCheckDialogTitle(checkType);\n    let dialogContent = getCheckTemplate(checkType);\n\n    return new Dialog({\n        title: dialogTitle,\n        content: dialogContent,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\",\n                callback: async (html) => {\n                    let id = html.find(\"#selectedAbility\")[0].value;\n\n                    let messageContent = `<div><h2>${checkType.toUpperCase()} Roll</h2></div>`\n                    for (let a of targetActors) {\n                        let name = a.name;\n                        let mod = 0;               \n                        switch (checkType) {\n                            case \"save\":\n                                mod = a.data.data.abilities[id].save;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} saving throw)<br>`;\n                                break;\n                            case \"ability\":\n                                mod = a.data.data.abilities[id].mod + a.data.data.abilities[id].checkBonus;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} check)<br>`;\n                                break;\n                            case \"skill\":\n                                mod = a.data.data.skills[id].total;\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.skills[id]} (${a.data.data.skills[id].ability}) check)<br>`;\n                                break;\n                            default:\n                                objects = game.dnd5e.config.skills;\n                                break;\n                        }\n                    }\n    \n                    let chatData = {\n                        user: game.user.id,\n                        speaker: game.user,\n                        content: messageContent,\n                        // Uncomment the following line if you want the results whispered to the GM.\n                        // whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n                    };\n                    ChatMessage.create(chatData, {});\n                }\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            }\n        },\n        default: \"cancel\"\n    });\n}\n\n// Gets list of selected tokens, or if no tokens are selected then the user's character.\nfunction getTargetActors() {\n    const character = game.user.character;\n    const controlled = canvas.tokens.controlled;\n    let actors = [];\n\n    if (controlled.length === 0) return [character] || null;\n\n    if (controlled.length > 0) {\n        let actors = [];\n        for (let i = 0; i < controlled.length; i++) {\n            actors.push(controlled[i].actor);\n    }\n\n    return actors;\n}\nelse throw new Error('You must designate at least one token as the roll target');\n}\n\n\n// Gets a template of abilities or skills, based on the type of check chosen.\nfunction getCheckTemplate(checkType) {\n    let objects = new Object();\n    \n    switch (checkType) {\n        case \"save\":\n        case \"ability\":\n            objects = game.dnd5e.config.abilities;\n            break;\n        case \"skill\":\n            objects = game.dnd5e.config.skills;\n            break;\n        default:\n            objects = game.dnd5e.config.skills;\n            break;\n    }\n\n    let template = `\n    <div>\n        <div class=\"form-group\">\n            <label>Choose check</label>\n            <select id=\"selectedAbility\">`\n    \n            for (let [checkId, check] of Object.entries(objects)) {\n                template += `<option value=\"${checkId}\">${check}</option>`;    \n            }            \n    \n    template += `</select>\n        </div>\n    </div>`;\n\n    return template;\n}\n\nfunction getCheckDialogTitle(checkType) {\n    switch (checkType) {\n        case \"save\":\n            return \"Saving Throw\"\n        case \"ability\":\n            return \"Ability Check\"\n        case \"skill\":\n            return \"Skill Check\"\n        default:\n            return \"Unknown Check\"\n    }\n}\n\nchooseCheckType.render(true);","folder":null,"sort":0,"permission":{"default":0,"ssK6qqhMHUvM1A06":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.IMsouJgPzXHzWP6I"}},"_id":"sT1wrIete5dYUV7a"}
{"name":"place FOUR RAYS at the same time","type":"script","author":"ssK6qqhMHUvM1A06","img":"icons/svg/dice-target.svg","scope":"global","command":"async function wait(ms) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\nfunction toDegrees(rads) {\n    return (rads * 180 / Math.PI) + 90;\n}\n\nif(!token) return ui.notifications.info(\"no token selected\")\n\nconst rayLengthFt = 30;\nconst rayLengthPx = canvas.grid.size * rayLengthFt / canvas.scene.data.gridDistance;\nconst startPoint = {x: token.center.x, y: token.center.y};\nlet angle = 0;\nlet start = 0;\nlet request;\nconst fill = game.user.data.color;\n\nfunction coordX(k){\n\tif(k === 0 || k === 2) return 0;\n\tif(k === 1) return -rayLengthPx;\n\tif(k === 3) return rayLengthPx;\n}\nfunction coordY(k){\n\tif(k === 1 || k === 3) return 0;\n\tif(k === 0) return rayLengthPx;\n\tif(k === 2) return -rayLengthPx;\n}\n\nasync function onLoad(){\n    //let rayLine = new PIXI.Graphics();\n    //rayLine.position.set(startPoint.x, startPoint.y);\n    //rayLine.lineStyle(15, fill.replace(\"#\",\"0x\"), 0.5)\n    //   .moveTo(0, 0)\n    //   .lineTo(0, rayLengthPx);\n    //rayLine.name = \"tempRay\";\n    //canvas.app.stage.addChild(rayLine);\n    //requestAnimationFrame(step);\n\t\n\t\n\tlet rayLine = [new PIXI.Graphics(),new PIXI.Graphics(),new PIXI.Graphics(),new PIXI.Graphics()];\n\tfor(let i = 0; i < 4; i++){\n\t\tlet r = rayLine[i];\n\t\tawait r.position.set(startPoint.x, startPoint.y);\n\t\tawait r.lineStyle(15, fill.replace(\"#\",\"0x\"), 0.5)\n\t\t\t.moveTo(0,0)\n\t\t\t.lineTo(coordX(i),coordY(i));\n\t\tr.name = `tempRay${i+1}`;\n\t\tcanvas.app.stage.addChild(r);\n\t\trequestAnimationFrame(step);\n\t} \n\t\n}\n\n\nfunction step(timestamp) {\n    let marker = [\n\t\tcanvas.app.stage.children.find(c => c.name == \"tempRay1\"),\n\t\tcanvas.app.stage.children.find(c => c.name == \"tempRay2\"),\n\t\tcanvas.app.stage.children.find(c => c.name == \"tempRay3\"),\n\t\tcanvas.app.stage.children.find(c => c.name == \"tempRay4\")\n\t];\n    if (start === 0) start = timestamp;\n    const elapsed = timestamp - start;\n    const mousePos = canvas.app.renderer.plugins.interaction.mouse.getLocalPosition(canvas.app.stage);\n    angle = mousePos.x === startPoint.x ? toDegrees(Math.PI / 2): \n                  mousePos.x > startPoint.x ? toDegrees(Math.PI - Math.atan((startPoint.y - mousePos.y)/(mousePos.x - startPoint.x))):\n                  mousePos.x < startPoint.x ? toDegrees(Math.atan((mousePos.y - startPoint.y)/(mousePos.x - startPoint.x))) : 0;//Math.ceil(elapsed * 360 / 1000);\n    marker[0].angle = angle;\n\tmarker[1].angle = angle;\n\tmarker[2].angle = angle;\n\tmarker[3].angle = angle;\n\t\n    if (elapsed < 1000) request = requestAnimationFrame(step);\n    else { \n        start = 0;\n        console.log(angle)\n        request = requestAnimationFrame(step);\n    }\n}\n\nfunction offSet(angle){\n\tconst halfGrid = canvas.grid.size / 2;\n\tconst angleR = Math.round((angle % 360)/45)*45;\n\tconsole.log(angleR);\n\tlet x, y;\n\t\n\tswitch(angleR){ // set x offset first\n\t\tcase 0:\n\t\tcase 180:\n\t\tcase 360:\n\t\t\tx = 0;\n\t\t\tbreak;\n\t\tcase 45:\n\t\tcase 90:\n\t\tcase 135:\n\t\t\tx = -halfGrid;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tx = halfGrid;\n\t}\n\tswitch(angleR){ // set y offset\n\t\tcase 0:\n\t\tcase 45:\n\t\tcase 315:\n\t\tcase 360:\n\t\t\ty = halfGrid;\n\t\t\tbreak;\n\t\tcase 135:\n\t\tcase 180:\n\t\tcase 225:\n\t\t\ty = -halfGrid;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ty = 0;\n\t}\n\t\n\tconsole.log(x);\n\tconsole.log(y);\n\t\n\treturn [x,y];\n}\n\nawait PIXI.Loader.shared\n    .load(onLoad);\n\nawait wait(500);\n\n$(document.body).on(\"click\", async () => {\n    $(document.body).off(\"click\");\n    cancelAnimationFrame(request);\n    canvas.app.stage.removeChild(canvas.app.stage.children.find(c => c.name === 'tempRay1'));\n\tcanvas.app.stage.removeChild(canvas.app.stage.children.find(c => c.name === 'tempRay2'));\n\tcanvas.app.stage.removeChild(canvas.app.stage.children.find(c => c.name === 'tempRay3'));\n\tcanvas.app.stage.removeChild(canvas.app.stage.children.find(c => c.name === 'tempRay4'));\n\t\n\tlet template_data_array = [];\n\t\n\tfor(let i = 0; i < 4; i++){\n\t\ttemplate_data_array.push({\n\t\t\tt: 'ray',\n\t\t\tuser: game.userId,\n\t\t\tdirection: angle + 90*(i+1),\n\t\t\tdistance: rayLengthFt,\n\t\t\twidth: 5,\n\t\t\tx: startPoint.x + offSet(angle + 90*i)[0],\n\t\t\ty: startPoint.y + offSet(angle + 90*i)[1],\n\t\t\tborderColor: '#000000',\n\t\t\tfillColor: '#3898B9'\n\t\t});\n\t}\n\t\n\t//let template_data = {\n\t//\tt: 'ray',\n\t//\tuser: game.userId,\n\t//\tdirection: angle + 90,\n\t//\tdistance: rayLengthFt,\n\t//\twidth: 5,\n\t//\tx: startPoint.x + offSet(angle)[0],\n\t//\ty: startPoint.y + offSet(angle)[1],\n\t//\tborderColor: '#000000',\n\t//\tfillColor: '#3898B9'\n\t//};\n\tlet ranges = await canvas.scene.createEmbeddedDocuments('MeasuredTemplate', template_data_array);\n});","folder":null,"sort":0,"permission":{"default":0,"ssK6qqhMHUvM1A06":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"cf":{"id":"temp_4i202gw72r8","path":"[Unused/unfinished]","color":"#000000"},"core":{"sourceId":"Compendium.world.my-macros.Em2iHRl91wkrupdd"}},"_id":"ztbWOEfM8BPs0cTI"}
